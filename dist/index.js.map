{"version":3,"sources":["../src/index.ts","../env.ts","../src/common/types.ts","../src/lib/default-hook.ts","../src/middlewares/logger/log-event.ts","../src/lib/docs.ts","../src/config.ts","../src/routes.ts","../src/middlewares/index.ts","../src/lib/nanoid.ts","../src/middlewares/logger/logger.ts","../src/modules/me/routes.ts","../src/modules/me/index.ts","../src/server.ts"],"sourcesContent":["import { serve } from \"@hono/node-server\";\n\nimport { env } from \"../env\";\nimport app from \"./server\";\n\nconst main = async () => {\n  serve(\n    {\n      fetch: app.fetch,\n      hostname: \"0.0.0.0\",\n      port: Number(env.PORT),\n    },\n    (info) => {\n      console.info(\n        `backend is available on http://${info.address}:${info.port}`\n      );\n      console.info(`Read the docs on http://${info.address}:${info.port}/docs`);\n    }\n  );\n};\n\n// sdk.start();\nmain().catch((e) => {\n  console.error(\"Failed to start server\");\n  console.error(e);\n  process.exit(1);\n});\n","import { existsSync, readFileSync, writeFileSync } from \"node:fs\";\nimport { createEnv } from \"@t3-oss/env-core\";\nimport { config as dotenvConfig } from \"dotenv\";\nimport { z } from \"zod\";\n\n// Check if .env file exists\nconst isEnvFileExists = existsSync(\".env\");\nif (!isEnvFileExists) {\n  const isExampleEnvFileExists = existsSync(\".env.example\");\n  if (!isExampleEnvFileExists) {\n    throw new Error(\"Please create a .env file\");\n  }\n  const exampleEnvFile = readFileSync(\".env.example\");\n  writeFileSync(\".env\", exampleEnvFile);\n  console.log(\"Created .env file\");\n}\ndotenvConfig();\n\nexport const env = createEnv({\n  server: {\n    PORT: z.string().optional(),\n    LOGTAIL_TOKEN: z.string().optional(),\n    DB_HOST: z.string(),\n    DB_USER: z.string(),\n    DB_PASSWORD: z.string(),\n    DB_NAME: z.string(),\n    DB_PORT: z.string(),\n  },\n\n  runtimeEnv: process.env,\n  emptyStringAsUndefined: true,\n});\n","import { OpenAPIHono } from \"@hono/zod-openapi\";\nimport type { z } from \"zod\";\n\nimport type { Schema } from \"hono\";\nimport config from \"../config\";\nimport { failWithErrorSchema } from \"../lib/common-schema\";\n\nexport type Entity = (typeof config.entityTypes)[number];\n\nexport type ContextEntity = (typeof config.contextEntityTypes)[number];\n\nexport type ProductEntity = (typeof config.productEntityTypes)[number];\n\nexport type OauthProviderOptions = (typeof config.oauthProviderOptions)[number];\n\nexport type NonEmptyArray<T> = readonly [T, ...T[]];\n\nexport type ErrorResponse = z.infer<typeof failWithErrorSchema>;\n\n// TODO find a way to make this generic for template, also make name more descriptive/specific. MiddlewareEnv? CommonEnv?\nexport type Env = {\n  Variables: {\n    allowedIds: Array<string>;\n    disallowedIds: Array<string>;\n  };\n};\n\nexport class CustomHono<\n  E extends Env = Env,\n  S extends Schema = {},\n  BasePath extends string = \"/\"\n> extends OpenAPIHono<E, S, BasePath> {}\n","import type { Hook } from \"@hono/zod-openapi\";\nimport { ZodError } from \"zod\";\nimport { logEvent } from \"../middlewares/logger/log-event\";\nimport { Env } from \"../common/types\";\n\nconst defaultHook: Hook<unknown, Env, \"\", unknown> = (result, ctx) => {\n  if (!result.success && result.error instanceof ZodError) {\n    logEvent(\n      \"Validation error\",\n      {\n        error: result.error.issues[0].message,\n        path: result.error.issues[0].path[0],\n      },\n      \"info\"\n    );\n\n    return ctx.json(\n      { success: false, error: result.error.issues[0].message },\n      400\n    );\n  }\n};\n\nexport default defaultHook;\n","import { Logtail } from \"@logtail/node\";\nimport { env } from \"../../../env\";\nimport { EventData, Severity } from \"../../lib/error\";\n\nexport const logtail = env.LOGTAIL_TOKEN\n  ? new Logtail(env.LOGTAIL_TOKEN, {})\n  : undefined;\n\nexport const logEvent = (\n  message: string,\n  eventData?: EventData,\n  severity: Severity = \"info\"\n) => {\n  if (eventData) {\n    console[severity](message, eventData);\n    if (logtail) logtail[severity](message, undefined, eventData);\n  } else {\n    console[severity](message);\n    if (logtail) logtail[severity](message);\n  }\n};\n","import { apiReference } from \"@scalar/hono-api-reference\";\nimport { CustomHono } from \"../common/types\";\nimport config from \"../config\";\nimport { appModulesList } from \"../routes\";\n\nconst commonModulesList = [\n  {\n    name: \"me\",\n    description:\n      \"Current user endpoints. They are split from `users` due to a different authorization flow.\",\n  },\n  {\n    name: \"users\",\n    description: \"`user` is also an entity, but NOT a contextual entity.\",\n  },\n  {\n    name: \"memberships\",\n    description:\n      \"Memberships are one-on-one relations between a user and a contextual entity, such as an organization. It contains a role and archived, muted status\",\n  },\n  {\n    name: \"organizations\",\n    description:\n      \"Organizations - `organization` - are obviously a central `entity`.\",\n  },\n  {\n    name: \"requests\",\n    description:\n      \"Receive public requests such as contact form, newsletter and waitlist requests.\",\n  },\n  {\n    name: \"general\",\n    description:\n      \"Endpoints that overlap multiple entities or are meant to support the system in general.\",\n  },\n  {\n    name: \"auth\",\n    description:\n      \"Multiple authentication methods are included: email/password combination, OAuth with Github. Other Oauth providers and passkey support are work in progress.\",\n  },\n];\n\n// Generate OpenAPI documentation using hono/zod-openapi and scalar/hono-api-reference\nconst docs = (app: CustomHono) => {\n  const registry = app.openAPIRegistry;\n\n  registry.registerComponent(\"securitySchemes\", \"cookieAuth\", {\n    type: \"apiKey\",\n    in: \"cookie\",\n    name: `${config.slug}-session-${config.apiVersion}`,\n    description:\n      \"Authentication cookie. Copy the cookie from your network tab and paste it here. If you don't have it, you need to sign in or sign up first.\",\n  });\n\n  const tags = commonModulesList.concat(appModulesList);\n\n  app.doc31(\"/openapi.json\", {\n    servers: [{ url: config.backendUrl }],\n    info: {\n      title: `${config.name} API`,\n      version: config.apiVersion,\n      description: config.apiDescription,\n    },\n    openapi: \"3.1.0\",\n    tags,\n    security: [{ cookieAuth: [] }],\n  });\n\n  // For more info on options, see\n  // https://github.com/scalar/scalar/blob/main/documentation/configuration.md\n  app.get(\n    \"/docs\",\n    apiReference({\n      defaultHttpClient: {\n        targetKey: \"node\",\n        clientKey: \"axios\",\n      },\n      spec: {\n        url: \"openapi.json\",\n      },\n    })\n  );\n};\n\nexport default docs;\n","export const config = {\n  mode: \"development\",\n  name: \"Cella\",\n  slug: \"cella\",\n\n  domain: \"cellajs.com\",\n  frontendUrl: \"https://cellajs.com\",\n  backendUrl: \"https://api.cellajs.com\",\n  backendAuthUrl: \"https://api.cellajs.com/auth\",\n  tusUrl: \"https://tus.cellajs.com\",\n\n  defaultRedirectPath: \"/home\",\n  firstSignInRedirectPath: \"/welcome\",\n\n  aboutUrl: \"/about\",\n  statusUrl: \"https://status.cellajs.com\",\n  productionUrl: \"https://cellajs.com\",\n\n  description:\n    \"Intuitive TypeScript template to build local-first web apps. Implementation-ready. MIT licensed.\",\n  keywords:\n    \"starter kit, fullstack, monorepo, typescript, hono, honojs, drizzle, shadcn, react, postgres, pwa\",\n\n  supportEmail: \"flip@cellajs.com\",\n  notificationsEmail: \"notifications@cellajs.com\",\n  senderIsReceiver: false,\n\n  debug: false,\n  maintenance: false,\n\n  apiVersion: \"v1\",\n  apiDescription: `\n        (ATTENTION: PRERELEASE!) This API documentation is split in modules. Each module relates to a module in the backend codebase. Each module should be at least loosely-coupled, but ideally entirely decoupled. The documentation is based upon zod schemas that are converted to openapi specs using hono middleware: zod-openapi.\n  \n        API differentiates between two types of resource: entities and resources. Entities are the main data objects, the other tables are secondary. They all have an entity column.\n  \n        Entities can be split into three categories:\n        1) Contextual entities (ie organization, workspace, project)\n        2) Product entities (ie task, label)\n        3) All entities (ie user, organization, workspace, project, task, label)\n  \n        - SSE stream is not included in this API documentation\n        - API design is flat, not nested`,\n\n  // Payment with Paddle\n  // paddleToken: 'live_ba8bb57b62089459e4f4fd1da8c',\n  // paddlePriceIds: {\n  //   donate: 'pri_01hq8hech7se5y1dw9tnscfzpc',\n  // },\n  paddleToken: \"test_85052d6574ab68d36b341e0afc8\",\n  paddlePriceIds: {\n    donate: \"pri_01hq8da4mn9s0z0da7chh0ntb9\",\n  },\n\n  sentryDsn:\n    \"https://0f6c6e4d1e825242d9d5b0b73faa97fa@o4506897995399168.ingest.us.sentry.io/4506898171559936\",\n  sentSentrySourceMaps: true,\n\n  // Customer support with Gleap\n  gleapToken: \"1ZoAxCRA83h5pj7qtRSvuz7rNNN9iXDd\",\n\n  // Google maps key\n  googleMapsKey: \"AIzaSyDMjCpQusdoPWLeD7jxkqAxVgJ8s5xJ3Co\",\n\n  // File handling with imado\n  tusPort: 1080,\n  s3UploadBucket: \"cella-uploads\",\n  s3UploadRegion: \"eu-west-1\",\n  privateCDNUrl: \"https://cdn-priv.cellajs.com\",\n  publicCDNUrl: \"https://cdn.cellajs.com\",\n\n  // Theme settings\n  theme: {\n    dark: { primary: \"#26262b\" },\n    rose: { primary: \"#e11d48\" },\n    colorDarkBackground: \"hsl(240 10% 9%)\",\n    strokeWidth: 1.5,\n    screenSizes: {\n      xs: \"420px\",\n      sm: \"640px\",\n      md: \"768px\",\n      lg: \"1024px\",\n      xl: \"1280px\",\n      \"2xl\": \"1400px\",\n    },\n  },\n\n  // Placeholder colors\n  placeholderColors: [\n    \"bg-blue-300\",\n    \"bg-lime-300\",\n    \"bg-orange-300\",\n    \"bg-yellow-300\",\n    \"bg-green-300\",\n    \"bg-teal-300\",\n    \"bg-indigo-300\",\n    \"bg-purple-300\",\n    \"bg-pink-300\",\n    \"bg-red-300\",\n  ],\n\n  sensitiveFields: [\"hashedPassword\", \"unsubscribeToken\"] as const,\n  // OAuth providers\n  oauthProviderOptions: [\"github\", \"google\", \"microsoft\"] as const,\n  enabledOauthProviders: [\"github\"] as const,\n\n  // Optional settings\n  has: {\n    pwa: true, // Progressive Web App support for preloading static assets and offline support\n    signUp: true, // Allow users to sign up. If disabled, the app is by invitation only\n    waitList: false, // Suggest a waitlist for unknown emails when sign up is disabled\n  },\n\n  // Languages\n  defaultLanguage: \"en\" as const,\n\n  languages: [\n    { value: \"en\", label: \"English\" },\n    { value: \"nl\", label: \"Nederlands\" },\n  ],\n\n  // All entity types\n  entityTypes: [\n    \"user\",\n    \"organization\",\n    \"workspace\",\n    \"project\",\n    \"task\",\n    \"label\",\n  ] as const,\n\n  // Page entity types (pages with memberships and users)\n  pageEntityTypes: [\"user\", \"organization\", \"workspace\", \"project\"] as const,\n\n  // Context entity types (memberships)\n  contextEntityTypes: [\"organization\", \"workspace\", \"project\"] as const,\n\n  // Product entity types (no memberships)\n  productEntityTypes: [\"task\", \"label\"] as const,\n\n  rolesByType: {\n    systemRoles: [\"user\", \"admin\"] as const,\n    entityRoles: [\"member\", \"admin\"] as const,\n    allRoles: [\"user\", \"member\", \"admin\"] as const,\n  },\n\n  // Company details\n  company: {\n    name: \"CellaJS\",\n    shortName: \"Cella\",\n    email: \"info@cellajs.com\",\n    postcode: \"90210 JS\",\n    tel: \"+31 6 12345678\",\n    streetAddress: \"Drizzle Road 42\",\n    city: \"Hono City\",\n    country: \"TypeScript Rock\",\n    googleMapsUrl: \"https://goo.gl/maps/SQlrh\",\n    scheduleCallUrl: \"https://cal.com/flip-van-haaren\",\n    twitterUrl: \"https://twitter.com/flipvanhaaren\",\n    twitterHandle: \"@flipvanhaaren\",\n    githubUrl: \"https://github.com/cellajs/cella\",\n    mapZoom: 4,\n    coordinates: {\n      lat: 51.92760809717153,\n      lng: 4.47421039909924,\n    },\n  },\n\n  // Common countries\n  common: {\n    countries: [\"fr\", \"de\", \"nl\", \"ua\", \"us\", \"gb\"],\n    timezones: [],\n  },\n};\n\nexport default config;\n\nexport type DeepPartial<T> = T extends object\n  ? {\n      [P in keyof T]?: DeepPartial<T[P]>;\n    }\n  : T;\n\nexport type Config = DeepPartial<typeof config>;\n","// import meRoutes from \"#/modules/me\";\n\nexport type Route = {\n  path: string;\n  // biome-ignore lint/suspicious/noExplicitAny: <explanation>\n  routes: any;\n};\n\n// Combine all routes from each module. The core modules are on top, followed by app-specific modules.\nconst routes: Route[] = [\n  //   {\n  //     path: \"/me\",\n  //     routes: meRoutes,\n  //   },\n];\n\nexport default routes;\n\n// Description of the app-specific modules for the API docs, generated by hono/zod-openapi and scalar/hono-api-reference\nexport const appModulesList = [\n  {\n    name: \"workspaces\",\n    description:\n      \"App-specific context entity. Workspace functions for end-users to personalize how they interact with their projects and the content in each project. Only the creator has access and no other members are possible.\",\n  },\n  {\n    name: \"projects\",\n    description:\n      \"App-specific context entity. Projects - like organizations - can have multiple members and are the primary entity in relation to the content-related resources: tasks, labels and attachments. Because a project can be in multiple workspaces, a relations table is maintained.\",\n  },\n  {\n    name: \"tasks\",\n    description:\n      \"App-specific product entity. Tasks are added to a project and can also contain subtasks.\",\n  },\n  {\n    name: \"labels\",\n    description:\n      \"App-specific product entity. Labels are given to tasks and are listed as part of on or more projects.\",\n  },\n];\n","import { secureHeaders } from \"hono/secure-headers\";\nimport { CustomHono } from \"../common/types\";\nimport { logger } from \"./logger/logger\";\nimport { logEvent } from \"./logger/log-event\";\nimport { cors } from \"hono/cors\";\n\nconst app = new CustomHono();\n\n// Secure headers\napp.use(\"*\", secureHeaders());\n\n// Get metrics and trace\n// app.use(\"*\", observatoryMiddleware);\n\n// Sentry\n// app.use(\"*\", sentry({ dsn: config.sentryDsn }));\n\n// Health check for render.com\napp.get(\"/ping\", (c) => c.text(\"pong\"));\n\n// Logger\napp.use(\"*\", logger(logEvent));\n\nconst corsOptions = {\n  //   origin: config.frontendUrl,\n  origin: [\"*\"],\n  credentials: true,\n  allowMethods: [\"GET\", \"HEAD\", \"PUT\", \"POST\", \"DELETE\"],\n  allowHeaders: [],\n};\n\n// CORS\napp.use(\"*\", cors(corsOptions));\n\n// CSRF protection\n// app.use(\"*\", csrf({ origin: config.frontendUrl }));\n\n// Rate limiter\n// app.use(\n//   \"*\",\n//   rateLimiter(\n//     {\n//       points: 50,\n//       duration: 60 * 60,\n//       blockDuration: 60 * 30,\n//       keyPrefix: \"common_fail\",\n//     },\n//     \"fail\"\n//   )\n// );\n\nexport default app;\n","import { customAlphabet } from \"nanoid\";\n\nexport const nanoid = customAlphabet(\"abcdefghijklmnopqrstuvwxyz0123456789\");\n","import type { MiddlewareHandler } from \"hono/types\";\nimport { nanoid } from \"../../lib/nanoid\";\n\nenum LogPrefix {\n  Outgoing = \"res\",\n  Incoming = \"req\",\n  Error = \"err\",\n}\n\nconst humanize = (times: string[]) => {\n  const [delimiter, separator] = [\",\", \".\"];\n\n  const orderTimes = times.map((v) =>\n    v.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, `$1${delimiter}`)\n  );\n\n  return orderTimes.join(separator);\n};\n\nconst time = (start: number) => {\n  const delta = Date.now() - start;\n  return humanize([\n    delta < 1000 ? `${delta}ms` : `${Math.round(delta / 1000)}s`,\n  ]);\n};\n\ntype PrintFunc = (str: string) => void;\n\nfunction log(\n  fn: PrintFunc,\n  prefix: string,\n  logId: string,\n  method: string,\n  path: string,\n  status = 0,\n  elapsed?: string,\n  user?: string,\n  org?: string\n) {\n  const out =\n    prefix === LogPrefix.Incoming\n      ? `${prefix} ${logId} ${method} ${path}`\n      : `${prefix} ${logId} ${method} ${path} ${status} ${elapsed} ${user}@${org}`;\n  fn(out);\n}\n\nexport const logger = (fn: PrintFunc = console.info): MiddlewareHandler => {\n  return async function logger(c, next) {\n    const { method } = c.req;\n\n    // Generate logId and set it so we can use it to match error reports\n    const logId = nanoid();\n    c.set(\"logId\", logId);\n\n    // Show path with search params\n    const stripUrl = c.req.raw.url\n      .replace(/(https?:\\/\\/)?([^\\/]+)/, \"\")\n      .slice(0, 150);\n\n    // Log incoming\n    log(fn, LogPrefix.Incoming, logId, method, stripUrl);\n\n    const start = Date.now();\n\n    await next();\n\n    // Add logging for user and organization ids\n    const user = c.get(\"user\")?.id || \"na\";\n    const org = c.get(\"organization\")?.id || \"na\";\n\n    // Log outgoing\n    log(\n      fn,\n      LogPrefix.Outgoing,\n      logId,\n      method,\n      stripUrl,\n      c.res.status,\n      time(start),\n      user,\n      org\n    );\n  };\n};\n","import { createRoute } from \"@hono/zod-openapi\";\n\nclass MeRoutesConfig {\n  public getSelf = createRoute({\n    method: \"get\",\n    path: \"/\",\n    // guard: isAuthenticated,\n    tags: [\"me\"],\n    summary: \"Get self\",\n    description:\n      \"Get the current user (self). It includes a `counts` object and a list of `sessions`.\",\n    responses: {\n      200: {\n        description: \"User\",\n        content: {\n          //   \"application/json\": {\n          //     schema: successWithDataSchema(meUserSchema),\n          //   },\n        },\n      },\n      //   ...errorResponses,\n    },\n  });\n\n  //   public updateSelf = createRouteConfig({\n  //     method: \"put\",\n  //     path: \"/\",\n  //     guard: isAuthenticated,\n  //     tags: [\"me\"],\n  //     summary: \"Update self\",\n  //     description: \"Update the current user (self).\",\n  //     request: {\n  //       body: {\n  //         content: {\n  //           \"application/json\": {\n  //             schema: updateUserBodySchema.omit({\n  //               role: true,\n  //             }),\n  //           },\n  //         },\n  //       },\n  //     },\n  //     responses: {\n  //       200: {\n  //         description: \"User\",\n  //         content: {\n  //           \"application/json\": {\n  //             schema: successWithDataSchema(userSchema.extend(signUpInfo.shape)),\n  //           },\n  //         },\n  //       },\n  //       ...errorResponses,\n  //     },\n  //   });\n}\nexport default new MeRoutesConfig();\n","import { CustomHono } from \"../../common/types\";\n\nimport meRoutesConfig from \"./routes\";\n\nconst app = new CustomHono();\n\n// Me (self) endpoints\nconst meRoutes = app\n  /*\n   * Get current user\n   */\n  .openapi(meRoutesConfig.getSelf, async (ctx) => {\n    return ctx.json(\n      {\n        success: true,\n        data: {},\n      },\n      200\n    );\n  });\n\nexport type AppMeType = typeof meRoutes;\n\nexport default meRoutes;\n","import { CustomHono } from \"./common/types\";\nimport defaultHook from \"./lib/default-hook\";\nimport docs from \"./lib/docs\";\nimport middlewares from \"./middlewares\";\nimport meRoutes from \"./modules/me\";\n\n// import docs from \"./lib/docs\";\n// import { errorResponse } from \"./lib/errors\";\n// import middlewares from \"./middlewares\";\n\n// Set default hook to catch validation errors\nconst app = new CustomHono({\n  defaultHook,\n});\n\n// Add global middleware\napp.route(\"\", middlewares);\n\n// Init OpenAPI docs\ndocs(app);\n\n// Not found handler\n// app.notFound((ctx) => {\n//   // t('common:error.route_not_found.text')\n//   return errorResponse(ctx, 404, \"route_not_found\", \"warn\", undefined, {\n//     path: ctx.req.path,\n//   });\n// });\n\n// Error handler\n// app.onError((err, ctx) => {\n//   // t('common:error.server_error.text')\n//   return errorResponse(ctx, 500, \"server_error\", \"error\", undefined, {}, err);\n// });\n\n// Add routes for each module\napp.route(\"/me\", meRoutes);\n\nexport default app;\n"],"mappings":";;;AAAA,yBAAsB;;;ACAtB,qBAAwD;AACxD,sBAA0B;AAC1B,oBAAuC;AACvC,iBAAkB;AAGlB,IAAM,sBAAkB,2BAAW,MAAM;AACzC,IAAI,CAAC,iBAAiB;AACpB,QAAM,6BAAyB,2BAAW,cAAc;AACxD,MAAI,CAAC,wBAAwB;AAC3B,UAAM,IAAI,MAAM,2BAA2B;AAAA,EAC7C;AACA,QAAM,qBAAiB,6BAAa,cAAc;AAClD,oCAAc,QAAQ,cAAc;AACpC,UAAQ,IAAI,mBAAmB;AACjC;AAAA,IACA,cAAAA,QAAa;AAEN,IAAM,UAAM,2BAAU;AAAA,EAC3B,QAAQ;AAAA,IACN,MAAM,aAAE,OAAO,EAAE,SAAS;AAAA,IAC1B,eAAe,aAAE,OAAO,EAAE,SAAS;AAAA,IACnC,SAAS,aAAE,OAAO;AAAA,IAClB,SAAS,aAAE,OAAO;AAAA,IAClB,aAAa,aAAE,OAAO;AAAA,IACtB,SAAS,aAAE,OAAO;AAAA,IAClB,SAAS,aAAE,OAAO;AAAA,EACpB;AAAA,EAEA,YAAY,QAAQ;AAAA,EACpB,wBAAwB;AAC1B,CAAC;;;AC/BD,yBAA4B;AA2BrB,IAAM,aAAN,cAIG,+BAA4B;AAAC;;;AC9BvC,IAAAC,cAAyB;;;ACDzB,kBAAwB;AAIjB,IAAM,UAAU,IAAI,gBACvB,IAAI,oBAAQ,IAAI,eAAe,CAAC,CAAC,IACjC;AAEG,IAAM,WAAW,CACtB,SACA,WACA,WAAqB,WAClB;AACH,MAAI,WAAW;AACb,YAAQ,QAAQ,EAAE,SAAS,SAAS;AACpC,QAAI,QAAS,SAAQ,QAAQ,EAAE,SAAS,QAAW,SAAS;AAAA,EAC9D,OAAO;AACL,YAAQ,QAAQ,EAAE,OAAO;AACzB,QAAI,QAAS,SAAQ,QAAQ,EAAE,OAAO;AAAA,EACxC;AACF;;;ADfA,IAAM,cAA+C,CAAC,QAAQ,QAAQ;AACpE,MAAI,CAAC,OAAO,WAAW,OAAO,iBAAiB,sBAAU;AACvD;AAAA,MACE;AAAA,MACA;AAAA,QACE,OAAO,OAAO,MAAM,OAAO,CAAC,EAAE;AAAA,QAC9B,MAAM,OAAO,MAAM,OAAO,CAAC,EAAE,KAAK,CAAC;AAAA,MACrC;AAAA,MACA;AAAA,IACF;AAEA,WAAO,IAAI;AAAA,MACT,EAAE,SAAS,OAAO,OAAO,OAAO,MAAM,OAAO,CAAC,EAAE,QAAQ;AAAA,MACxD;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAO,uBAAQ;;;AEvBf,gCAA6B;;;ACAtB,IAAM,SAAS;AAAA,EACpB,MAAM;AAAA,EACN,MAAM;AAAA,EACN,MAAM;AAAA,EAEN,QAAQ;AAAA,EACR,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,gBAAgB;AAAA,EAChB,QAAQ;AAAA,EAER,qBAAqB;AAAA,EACrB,yBAAyB;AAAA,EAEzB,UAAU;AAAA,EACV,WAAW;AAAA,EACX,eAAe;AAAA,EAEf,aACE;AAAA,EACF,UACE;AAAA,EAEF,cAAc;AAAA,EACd,oBAAoB;AAAA,EACpB,kBAAkB;AAAA,EAElB,OAAO;AAAA,EACP,aAAa;AAAA,EAEb,YAAY;AAAA,EACZ,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkBhB,aAAa;AAAA,EACb,gBAAgB;AAAA,IACd,QAAQ;AAAA,EACV;AAAA,EAEA,WACE;AAAA,EACF,sBAAsB;AAAA;AAAA,EAGtB,YAAY;AAAA;AAAA,EAGZ,eAAe;AAAA;AAAA,EAGf,SAAS;AAAA,EACT,gBAAgB;AAAA,EAChB,gBAAgB;AAAA,EAChB,eAAe;AAAA,EACf,cAAc;AAAA;AAAA,EAGd,OAAO;AAAA,IACL,MAAM,EAAE,SAAS,UAAU;AAAA,IAC3B,MAAM,EAAE,SAAS,UAAU;AAAA,IAC3B,qBAAqB;AAAA,IACrB,aAAa;AAAA,IACb,aAAa;AAAA,MACX,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,IAAI;AAAA,MACJ,OAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA,EAGA,mBAAmB;AAAA,IACjB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EAEA,iBAAiB,CAAC,kBAAkB,kBAAkB;AAAA;AAAA,EAEtD,sBAAsB,CAAC,UAAU,UAAU,WAAW;AAAA,EACtD,uBAAuB,CAAC,QAAQ;AAAA;AAAA,EAGhC,KAAK;AAAA,IACH,KAAK;AAAA;AAAA,IACL,QAAQ;AAAA;AAAA,IACR,UAAU;AAAA;AAAA,EACZ;AAAA;AAAA,EAGA,iBAAiB;AAAA,EAEjB,WAAW;AAAA,IACT,EAAE,OAAO,MAAM,OAAO,UAAU;AAAA,IAChC,EAAE,OAAO,MAAM,OAAO,aAAa;AAAA,EACrC;AAAA;AAAA,EAGA,aAAa;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA;AAAA,EAGA,iBAAiB,CAAC,QAAQ,gBAAgB,aAAa,SAAS;AAAA;AAAA,EAGhE,oBAAoB,CAAC,gBAAgB,aAAa,SAAS;AAAA;AAAA,EAG3D,oBAAoB,CAAC,QAAQ,OAAO;AAAA,EAEpC,aAAa;AAAA,IACX,aAAa,CAAC,QAAQ,OAAO;AAAA,IAC7B,aAAa,CAAC,UAAU,OAAO;AAAA,IAC/B,UAAU,CAAC,QAAQ,UAAU,OAAO;AAAA,EACtC;AAAA;AAAA,EAGA,SAAS;AAAA,IACP,MAAM;AAAA,IACN,WAAW;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,IACV,KAAK;AAAA,IACL,eAAe;AAAA,IACf,MAAM;AAAA,IACN,SAAS;AAAA,IACT,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,WAAW;AAAA,IACX,SAAS;AAAA,IACT,aAAa;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AAAA,IACP;AAAA,EACF;AAAA;AAAA,EAGA,QAAQ;AAAA,IACN,WAAW,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,IAAI;AAAA,IAC9C,WAAW,CAAC;AAAA,EACd;AACF;AAEA,IAAO,iBAAQ;;;AC5JR,IAAM,iBAAiB;AAAA,EAC5B;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AACF;;;AFnCA,IAAM,oBAAoB;AAAA,EACxB;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aAAa;AAAA,EACf;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AAAA,EACA;AAAA,IACE,MAAM;AAAA,IACN,aACE;AAAA,EACJ;AACF;AAGA,IAAM,OAAO,CAACC,SAAoB;AAChC,QAAM,WAAWA,KAAI;AAErB,WAAS,kBAAkB,mBAAmB,cAAc;AAAA,IAC1D,MAAM;AAAA,IACN,IAAI;AAAA,IACJ,MAAM,GAAG,eAAO,IAAI,YAAY,eAAO,UAAU;AAAA,IACjD,aACE;AAAA,EACJ,CAAC;AAED,QAAM,OAAO,kBAAkB,OAAO,cAAc;AAEpD,EAAAA,KAAI,MAAM,iBAAiB;AAAA,IACzB,SAAS,CAAC,EAAE,KAAK,eAAO,WAAW,CAAC;AAAA,IACpC,MAAM;AAAA,MACJ,OAAO,GAAG,eAAO,IAAI;AAAA,MACrB,SAAS,eAAO;AAAA,MAChB,aAAa,eAAO;AAAA,IACtB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA,UAAU,CAAC,EAAE,YAAY,CAAC,EAAE,CAAC;AAAA,EAC/B,CAAC;AAID,EAAAA,KAAI;AAAA,IACF;AAAA,QACA,wCAAa;AAAA,MACX,mBAAmB;AAAA,QACjB,WAAW;AAAA,QACX,WAAW;AAAA,MACb;AAAA,MACA,MAAM;AAAA,QACJ,KAAK;AAAA,MACP;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAO,eAAQ;;;AGpFf,4BAA8B;;;ACA9B,oBAA+B;AAExB,IAAM,aAAS,8BAAe,sCAAsC;;;ACO3E,IAAM,WAAW,CAAC,UAAoB;AACpC,QAAM,CAAC,WAAW,SAAS,IAAI,CAAC,KAAK,GAAG;AAExC,QAAM,aAAa,MAAM;AAAA,IAAI,CAAC,MAC5B,EAAE,QAAQ,4BAA4B,KAAK,SAAS,EAAE;AAAA,EACxD;AAEA,SAAO,WAAW,KAAK,SAAS;AAClC;AAEA,IAAM,OAAO,CAAC,UAAkB;AAC9B,QAAM,QAAQ,KAAK,IAAI,IAAI;AAC3B,SAAO,SAAS;AAAA,IACd,QAAQ,MAAO,GAAG,KAAK,OAAO,GAAG,KAAK,MAAM,QAAQ,GAAI,CAAC;AAAA,EAC3D,CAAC;AACH;AAIA,SAAS,IACP,IACA,QACA,OACA,QACA,MACA,SAAS,GACT,SACA,MACA,KACA;AACA,QAAM,MACJ,WAAW,uBACP,GAAG,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,IAAI,KACpC,GAAG,MAAM,IAAI,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,OAAO,IAAI,IAAI,IAAI,GAAG;AAC9E,KAAG,GAAG;AACR;AAEO,IAAM,SAAS,CAAC,KAAgB,QAAQ,SAA4B;AACzE,SAAO,eAAeC,QAAO,GAAG,MAAM;AACpC,UAAM,EAAE,OAAO,IAAI,EAAE;AAGrB,UAAM,QAAQ,OAAO;AACrB,MAAE,IAAI,SAAS,KAAK;AAGpB,UAAM,WAAW,EAAE,IAAI,IAAI,IACxB,QAAQ,0BAA0B,EAAE,EACpC,MAAM,GAAG,GAAG;AAGf,QAAI,IAAI,sBAAoB,OAAO,QAAQ,QAAQ;AAEnD,UAAM,QAAQ,KAAK,IAAI;AAEvB,UAAM,KAAK;AAGX,UAAM,OAAO,EAAE,IAAI,MAAM,GAAG,MAAM;AAClC,UAAM,MAAM,EAAE,IAAI,cAAc,GAAG,MAAM;AAGzC;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,EAAE,IAAI;AAAA,MACN,KAAK,KAAK;AAAA,MACV;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AF/EA,kBAAqB;AAErB,IAAM,MAAM,IAAI,WAAW;AAG3B,IAAI,IAAI,SAAK,qCAAc,CAAC;AAS5B,IAAI,IAAI,SAAS,CAAC,MAAM,EAAE,KAAK,MAAM,CAAC;AAGtC,IAAI,IAAI,KAAK,OAAO,QAAQ,CAAC;AAE7B,IAAM,cAAc;AAAA;AAAA,EAElB,QAAQ,CAAC,GAAG;AAAA,EACZ,aAAa;AAAA,EACb,cAAc,CAAC,OAAO,QAAQ,OAAO,QAAQ,QAAQ;AAAA,EACrD,cAAc,CAAC;AACjB;AAGA,IAAI,IAAI,SAAK,kBAAK,WAAW,CAAC;AAmB9B,IAAO,sBAAQ;;;AGnDf,IAAAC,sBAA4B;AAE5B,IAAM,iBAAN,MAAqB;AAAA,EACZ,cAAU,iCAAY;AAAA,IAC3B,QAAQ;AAAA,IACR,MAAM;AAAA;AAAA,IAEN,MAAM,CAAC,IAAI;AAAA,IACX,SAAS;AAAA,IACT,aACE;AAAA,IACF,WAAW;AAAA,MACT,KAAK;AAAA,QACH,aAAa;AAAA,QACb,SAAS;AAAA;AAAA;AAAA;AAAA,QAIT;AAAA,MACF;AAAA;AAAA,IAEF;AAAA,EACF,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgCH;AACA,IAAO,iBAAQ,IAAI,eAAe;;;ACnDlC,IAAMC,OAAM,IAAI,WAAW;AAG3B,IAAM,WAAWA,KAId,QAAQ,eAAe,SAAS,OAAO,QAAQ;AAC9C,SAAO,IAAI;AAAA,IACT;AAAA,MACE,SAAS;AAAA,MACT,MAAM,CAAC;AAAA,IACT;AAAA,IACA;AAAA,EACF;AACF,CAAC;AAIH,IAAO,aAAQ;;;ACZf,IAAMC,OAAM,IAAI,WAAW;AAAA,EACzB;AACF,CAAC;AAGDA,KAAI,MAAM,IAAI,mBAAW;AAGzB,aAAKA,IAAG;AAiBRA,KAAI,MAAM,OAAO,UAAQ;AAEzB,IAAO,iBAAQA;;;AbjCf,IAAM,OAAO,YAAY;AACvB;AAAA,IACE;AAAA,MACE,OAAO,eAAI;AAAA,MACX,UAAU;AAAA,MACV,MAAM,OAAO,IAAI,IAAI;AAAA,IACvB;AAAA,IACA,CAAC,SAAS;AACR,cAAQ;AAAA,QACN,kCAAkC,KAAK,OAAO,IAAI,KAAK,IAAI;AAAA,MAC7D;AACA,cAAQ,KAAK,2BAA2B,KAAK,OAAO,IAAI,KAAK,IAAI,OAAO;AAAA,IAC1E;AAAA,EACF;AACF;AAGA,KAAK,EAAE,MAAM,CAAC,MAAM;AAClB,UAAQ,MAAM,wBAAwB;AACtC,UAAQ,MAAM,CAAC;AACf,UAAQ,KAAK,CAAC;AAChB,CAAC;","names":["dotenvConfig","import_zod","app","logger","import_zod_openapi","app","app"]}